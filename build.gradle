

plugins {
    id 'java'
    id 'java-library'
    id 'application'
    //id 'war'
}

wrapper {
    version= '8.5'
}

application {
    mainClass = 'myorg.aggregator.Aggregator'
}

group = 'myorg.aggregator'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {

    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.22.0'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.17.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.8.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.8.0'
    //compileOnly group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.0.0'

}

test {
    useJUnitPlatform()
}

configurations {
    externalLib.extendsFrom(implementation)
}

/*task copyDependencies(type: Copy) {
   from configurations.externalLib{
            into "${buildDir}/libs/dependencies/"
            //exclude('<if any jars need to be excluded>')
   }
}*/



jar {
    archiveBaseName = 'AggregatorApp'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes("Implementation-Title": "Gradle",
                    "Implementation-Version": archiveVersion,
                    "Main-Class": "myorg.aggregator.Aggregator")
                    //"Class-Path": "${rootDir}"+' '+"myorg/aggregator")
                    //"Class-Path": configurations.externalLib.collect {'dependencies/' + it.name }.join(' '))
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'myorg.aggregator.Aggregator'
    }
    archiveBaseName = 'AggregatorApp'

    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}